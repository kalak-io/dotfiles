use-grammars = { only = [ "rust", "python", "vue", "javascript", "json", "typescript" ] }

[language-server.gpt]
command = "helix-gpt"

[language-server.rust-analyzer]
command = "rust-analyzer"

[language-server.rust-analyzer.config]
inlayHints.bindingModeHints.enable = true
inlayHints.closingBraceHints.minLines = 10
inlayHints.closureReturnTypeHints.enable = "with_block"
inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false

[language-server.rust-analyzer.config.files]
watcher = "server"

[language-server.rust-analyzer.config.check]
command = "clippy"

[language-server.rust-analyzer.config.cargo]
features = "all"


[[language]]
name = "rust"
scope = "source.rust"
injection-regex = "rs|rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock"]
shebangs = ["rust-script", "cargo"]
formatter = { command = "rustfmt" , args = ["--"] }
auto-format = true
comment-tokens = ["//", "///", "//!"]
block-comment-tokens = [
  { start = "/*", end = "*/" },
  { start = "/**", end = "*/" },
  { start = "/*!", end = "*/" },
]
language-servers = [ "rust-analyzer", "gpt" ]
indent = { tab-width = 4, unit = "    " }
persistent-diagnostic-sources = ["rustc", "clippy"]

[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'

[language.debugger]
name = "lldb-dap"
transport = "stdio"
command = "lldb-dap"

[[language.debugger.templates]]
name = "binary"
request = "launch"
completion = [ { name = "binary", completion = "filename" } ]
args = { program = "{0}" }

[[language.debugger.templates]]
name = "binary (terminal)"
request = "launch"
completion = [ { name = "binary", completion = "filename" } ]
args = { program = "{0}", runInTerminal = true }

[[language.debugger.templates]]
name = "attach"
request = "attach"
completion = [ "pid" ]
args = { pid = "{0}" }

[[language.debugger.templates]]
name = "gdbserver attach"
request = "attach"
completion = [ { name = "lldb connect url", default = "connect://localhost:3333" }, { name = "file", completion = "filename" }, "pid" ]
args = { attachCommands = [ "platform select remote-gdb-server", "platform connect {0}", "file {1}", "attach {2}" ] }

[[grammar]]
name = "rust"
source = { git = "https://github.com/tree-sitter/tree-sitter-rust", rev = "1f63b33efee17e833e0ea29266dd3d713e27e321" }

[[language]]
name = "python"
language-id = "python"
roots = ["pyproject.toml", "poetry.lock", ".git", ".venv/"]
language-servers = ["ruff", "basedpyright", "gpt"]
formatter = { command = "sh", args = [
  "-c",
  "uvx ruff check --fix - | uvx ruff format -",
] }
file-types = ["py", "ipynb"]
comment-token = "#"
shebangs = ["python"]
auto-format = true

[language-server.ruff]
command = "uvx"
args = ["ruff", "server"]
environment = { "RUFF_TRACE" = "messages" }

[language-server.ruff.config.settings]
lineLength = 100
logLevel = "debug"
fix = true

[language-server.ruff.config.settings.lint]
select = []
ignore = []

[tool.ruff.lint.per-file-ignores]
"src/tests/*" = ["S101", "D103"] # autoriser les assertions, autoriser les docstrings manquantes

[language-server.ruff.config.settings.format]
quote-style = "double"
docstring-code-format = true
indent-style = "space"

[language-server.basedpyright]
command = "uvx"
args = ["--from", "basedpyright", "basedpyright-langserver", "--stdio"]

[language-server.basedpyright.config]
python.pythonPath = ".venv/bin/python"

[language-server.basedpyright.config.basedpyright.analysis]
autoSearchPaths = true
typeCheckingMode = "basic"
diagnosticMode = "openFilesOnly"
autoImportCompletions = true

[[language]]
name = "vue"
file-types = ["vue"]
auto-format = true
formatter = { command = "prettier", args = ["--parser", "vue"] }
language-servers = ["typescript-language-server", "gpt"]

[[language-server.typescript-language-server.config.plugins]]
name = "@vue/typescript-plugin"
location = "/home/kalak/.nvm/versions/node/v24.4.0/bin/vue-language-server"
languages = ["vue"]

[language-server]
biome = { command = "biome", args = ["lsp-proxy"] }

[[language]]
name = "javascript"
language-servers = [ { name = "typescript-language-server", except-features = [ "format" ] }, "biome", "gpt" ]
auto-format = true

[[language]]
name = "typescript"
language-servers = [ { name = "typescript-language-server", except-features = [ "format" ] }, "biome", "gpt" ]
auto-format = true

[[language]]
name = "tsx"
auto-format = true
language-servers = [ { name = "typescript-language-server", except-features = [ "format" ] }, "biome", "gpt" ]

[[language]]
name = "jsx"
auto-format = true
language-servers = [ { name = "typescript-language-server", except-features = [ "format" ] }, "biome", "gpt" ]

[[language]]
name = "json"
language-servers = [ { name = "vscode-json-language-server", except-features = [ "format" ] }, "biome", "gpt" ]


